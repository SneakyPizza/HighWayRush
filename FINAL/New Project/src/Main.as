package src{	import flash.display.MovieClip; 	import flash.display.Sprite;	import flash.ui.Keyboard;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.geom.Point;	import flash.utils.Timer;	import flash.events.TimerEvent;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.events.MouseEvent;			public class Main extends MovieClip	{		public var player:Player;		private var ySnelheid:int;		private var background:Background;		private var _background:Array;		private var _background2:Array;		private var road:Road;		private var _road:Array;		private var obstacle:Obstacle;		private var obstacles:Array;		private var enemy:Enemy;		private var enemy2:Enemy2;		private var enemies:Array;		private var space:Boolean;		public var canJump:Boolean;		private var dead:Boolean;		private var timerObstacle:Timer;		private var timerEnemies:Timer;		public var totalScore:int;		private var score:int;			private var meters:int;			private var punten:TextField;		private var afstand:TextField;		private var rocketCount:TextField;		private var bulletCount:TextField;		private var puntenformat:TextFormat = new TextFormat();		public var bullets:Array;		public var enemybullets:Array;		public var powerups:Array;		public var explosions:Array;		public var powerbar:Powerbar;		public var rocketart:MovieClip;						public static var _main:Main;		private var startScherm:Startscherm = new Startscherm;		private var eindScherm:Eindscherm = new Eindscherm;				public var boost:int = 0;		private var diffUp:int;		private var speedUp:Boolean = false;		private var baseDistance:int;				public function Main():void{			if (stage) startSchermStart();			else addEventListener(Event.ADDED_TO_STAGE, startSchermStart);			}		public function startSchermStart(e:Event = null){			addChild(startScherm);			startScherm.addEventListener("removeStartScherm", init);		}				public function init(e:Event = null):void 		{			_main = this;			_background = new Array();			_background2 = new Array();			_road = new Array();				powerbar = new Powerbar();									for(var k2:int = 0; k2 < 2; k2++){				_background2.push(new Background2());				addChild(_background2[k2]);				_background2[k2].x = k2 * stage.stageWidth;				_background2[k2].y = 0;			}						for(var k:int = 0; k < 2; k++){				_background.push(new Background());				addChild(_background[k]);				_background[k].x = k * stage.stageWidth;				_background[k].y = 0;			}						for(var w:int = 0; w < 2; w++){				_road.push(new Road());				addChild(_road[w]);				_road[w].x = w * stage.stageWidth;				_road[w].y = 580;			}						dead = false;			space = false;			diffUp = 0;			totalScore = 0;			baseDistance = 0;			meters = 0;			score = 0;						powerups = [];			bullets = [];			enemybullets = [];			obstacles = [];			explosions = [];			enemies = [];						player = new Player();			addChild(player);						player.x = 140;			player.y = 500;			ySnelheid = 6;						addChild(powerbar);			powerbar.x = 15;			powerbar.y = 18;						rocketart = new RocketCountArt();			addChild(rocketart);			rocketart.x = 180;			rocketart.y = 80;						puntenformat.size = 24;						punten = new TextField();			punten.defaultTextFormat = puntenformat;			punten.textColor = 0xffffff;			punten.x = 570;			punten.y = 670;			punten.width = 180;			addChild(punten);								afstand = new TextField();			afstand.defaultTextFormat = puntenformat;			afstand.textColor = 0xffffff;			afstand.x = 570;			afstand.y = 630;			afstand.width = 180;			addChild(afstand);						addEventListener(Event.ENTER_FRAME, loop);			stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);						difficulty();		}		private function difficulty() {			timerEnemies = new Timer(3500 - diffUp + Math.random() * 1000, 0);			timerEnemies.addEventListener(TimerEvent.TIMER,spawnEnemies);						timerObstacle = new Timer(4500 - diffUp + Math.random() * 1500, 0);			timerObstacle.addEventListener(TimerEvent.TIMER, spawnObstacles);			timerEnemies.start();			timerObstacle.start();					}		private function spawnEnemies(e:TimerEvent):void{						switch(Math.floor(Math.random() * 2)){				case 0:				enemies.push(new Enemy);					break;				case 1:				enemies.push(new Enemy2);				break;			}						addChild(enemies[enemies.length -1]);			enemies[enemies.length -1].x = 1300 + Math.floor(Math.random() * 600);			enemies[enemies.length -1].y = 30 + Math.floor(Math.random() * 250);					}			private function spawnObstacles(e:TimerEvent):void{			obstacles.push(new Obstacle);			addChild(obstacles[obstacles.length -1]);						obstacles[obstacles.length -1].x = 1300 + Math.floor(Math.random() * 600);			obstacles[obstacles.length -1].y = 558;		}						/////////////////////////GAMELOOP//////////////////////////////////		private function loop(e:Event):void{			//SCORE text			punten.text = "Rush Points: " + String(score);			afstand.text = "Distance: " + String(meters);						if (player._frontgun.numBull > 0) {				rocketart.visible = true;				rocketart.gotoAndStop(player._frontgun.numBull);			}			else { rocketart.visible = false; }									if (totalScore <= score + meters) { totalScore = score + meters; }						if(player._rocketgun.aantalBullets < 100){player._rocketgun.aantalBullets += 1;}						meters += 1;			if (meters == baseDistance + 1000) {   					diffUp += 500;				this.timerObstacle.stop();				this.timerObstacle.removeEventListener(TimerEvent.TIMER,spawnObstacles);				this.timerEnemies.stop();				this.timerEnemies.removeEventListener(TimerEvent.TIMER, spawnEnemies);				baseDistance += 1000;				difficulty();			}						powerbar.art.gotoAndStop(player._rocketgun.aantalBullets);						player.y += ySnelheid; 			player.x += boost;			player._rocketgun.followTarget(new Point((mouseX - player.x), (mouseY - player.y)));						for each(var ex:MovieClip in explosions) {				if (ex.art.currentFrame == ex.art.framesLoaded){					removeChild(ex);					explosions.splice(explosions.indexOf(ex), 1);				}			}			if (player.x >= 230){				boost -= 1;			}						if (player.x <= 140){				player.boostBool = true;				boost = 0;			}						for each (var ob:Obstacle in obstacles){				ob.obstacleMovement();			}							for each (var enem:MovieClip in enemies){				enem.enemyLoop();				enem.followTarget(new Point(player.x, player.y));							}						//POWERUPS			for each (var item:Powerup in powerups){				item.powerLoop();			}								for (var pu:int = powerups.length -1; pu >= 0; pu--)			{				var splicepowerup:Boolean = false;								if (powerups[pu].x < -5){					splicepowerup = true;				}				if(player.hitTestObject(powerups[pu])){					splicepowerup = true;					player._frontgun.numBull = 3;					//trace(player._frontgun.numBull);				}				if(splicepowerup){					if (contains(powerups[pu])){						removeChild(powerups[pu]);						enemies.splice(pu, 0);					}				}			}						//ENEMIES			for(var en:int = enemies.length -1; en >= 0; en--)			{				if(enemies[en].x < - 30){					if (contains(enemies[en])){						enemies[en].destroy();						removeChild(enemies[en]);						enemies.splice(en, 0);					//trace ('splice enemy');						}				}			}						for (var k:int = enemybullets.length-1; k >= 0; k--){				enemybullets[k].movement(14);								if (player.hitTestPoint(enemybullets[k].x, enemybullets[k].y, true)) {					dead = true;					removeChild(enemybullets[k]);					enemybullets.splice(k, 1);				}				}			//OBSTACLES			for(var i:int = obstacles.length -1; i >= 0; i--){								if(player.hitTestObject(obstacles[i])){					dead = true;				}				if(obstacles[i].x < -5){					if (contains(obstacles[i]))					removeChild(obstacles[i]);					obstacles.splice(i, 0);					//trace ('splice obstacle');				}			}			////   BULLET LOOP   ////			for (var bu:int = bullets.length -1; bu >= 0; bu--){				var splicebullet:Boolean = false;				var explo:Explosion =  new Explosion();								bullets[bu].movement(30);								if (bullets[bu].x > stage.stageWidth + 100 || bullets[bu].y < -50 || bullets[bu].y > stage.stageHeight + 100){						splicebullet = true;				}								for each(var enemy:MovieClip in enemies){										if (enemy.hitTestPoint(bullets[bu].x, bullets[bu].y, true)){						splicebullet = true;						enemy._life -= 1;												if(enemy._life <= 0){							if(Math.random() < 0.10){enemy.dropPowerUp();}							score += 10;							enemy.destroy();							removeChild(enemy);							enemies.splice(enemies.indexOf(enemy), 1);						}					}				}				for each(var obstacle:Obstacle in obstacles){										if (obstacle.hitTestPoint(bullets[bu].x, bullets[bu].y, true)){						splicebullet = true;						obstacle.life -= 1;												if (obstacle.life <= 0) {							obstacle.destroy();							removeChild(obstacle);							obstacles.splice(obstacles.indexOf(obstacle), 1);							//trace('splice obstacle')						}					}				}				if (splicebullet){					removeChild(bullets[bu]);					bullets.splice(bu, 1);					//trace("splice bull");				}			}			for each (var back:MovieClip in _background){				back.move();				if (back.x < -back.width){					back.x += back.width * 2;				}			}						for each (var back2:MovieClip in _background2){				back2.move();				if (back2.x < -back2.width){					back2.x += back2.width * 2;				}			}									for each (var Ro:MovieClip in _road){				Ro.move();				if (Ro.x < - Ro.width) {					Ro.x += Ro.width * 2;				}			}						////////   JUMPING   ////////			if (player.y > 550) {				canJump = true;				player.rotation = 0;				player.y = 551;				}			if (space){				if (canJump) {					//player.rotation = -20;					canJump = false;					ySnelheid = -19;				}			}			if(ySnelheid < 17){				ySnelheid += 1;			}			////////    DEATH     ////////			if (dead) {				//REMOVE TIMERS AND EVENTLISTENERS				//timerObstacle.stop();				//timerObstacle.removeEventListener(TimerEvent.TIMER,spawnObstacles);				//				//timerEnemies.stop();				//timerEnemies.removeEventListener(TimerEvent.TIMER,spawnEnemies);				//				//removeEventListener(Event.ENTER_FRAME, loop);				//stage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);				//stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				//				//REMOVE BACKGROUND & ROAD				//for (var bg:int = 0; bg < _background.length; bg++) {					//if (contains(_background[bg])) removeChild(_background[bg]);				//}				//for (var bg2:int = 0; bg2 < _background2.length; bg2++) {					//if (contains(_background2[bg2])) removeChild(_background2[bg2]);				//}				//for (var r:int = 0; r < _road.length; r++) {					//if (contains(_road[r])) removeChild(_road[r]);				//}				//REMOVE OBSTACLES & POWERUPS				//for(var j: int = 0; j < obstacles.length ; j++){					//if(contains(obstacles[j]))removeChild(obstacles[j]);				//}				//for(var pUp: int = 0; pUp < powerups.length ; pUp++){					//if(contains(powerups[pUp]))removeChild(powerups[pUp]);				//}				//REMOVE BULLETS & ENEMYBULLETS				//for (var bul:int = 0; bul < bullets.length; bul++ ) {					//if (contains(bullets[bul])) removeChild(bullets[bul]);				//}							//for (var eBul:int = 0; eBul < enemybullets.length; eBul++ ) {					//if (contains(enemybullets[eBul])) removeChild(enemybullets[eBul]);				//}					//REMOVE ENEMIES & EXPLOSIONS				//for (var d:int = 0; d < enemies.length; d++) {					//if (contains(enemies[d])) {						//enemies[d].destroy();						//removeChild(enemies[d]);					//}				//}				//for (var exp:int = 0; exp < explosions.length; exp++ ) {					//if (contains(explosions[exp])) removeChild(explosions[exp]);				//}				//REST				//				//removeChild(player);				//player = null;				//removeChild(punten);				//removeChild(afstand);				//removeChild(rocketCount);				//removeChild(bulletCount);				//removeChild(powerbar);				//																for (var d:int = 0; d < enemies.length; d++) {					if (contains(enemies[d])) {						enemies[d].destroy();						removeChild(enemies[d]);					}				}				clearScreen();								addChild(eindScherm);				//addChild(punten);				//punten.x = stage.stageWidth / 2;				//punten.y = stage.stageHeight / 2;				//punten.text = "You scored: " + String(totalScore) + "points!";							}		}		private function clearScreen(){			this.removeEventListener(Event.ENTER_FRAME, loop);			stage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			this.timerObstacle.stop();			this.timerObstacle.removeEventListener(TimerEvent.TIMER,spawnObstacles);			this.timerEnemies.stop();			this.timerEnemies.removeEventListener(TimerEvent.TIMER, spawnEnemies);			this.removeEventListener(MouseEvent.MOUSE_DOWN, player._rocketgun.fireWeapon);			this.removeEventListener(MouseEvent.MOUSE_UP, player._rocketgun.mouseReleased);			this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, player._frontgun.keyDownShoot);							for (var l:int = this.numChildren-1; l >= 0; l--) {				removeChildAt(l);			}						bullets.splice(0, bullets.length);			enemybullets.splice(0, enemybullets.length);			powerups.splice(0, powerups.length);			enemies.splice(0, enemies.length);			obstacles.splice(0, obstacles.length);			explosions.splice(0, explosions.length);					}		private function keyUpHandler(e:KeyboardEvent):void{ 			if (e.keyCode == Keyboard.SPACE){				space = false;			}		}				private function keyDownHandler(e:KeyboardEvent):void{			if (e.keyCode == Keyboard.SPACE){				space = true;			}		}			}	}